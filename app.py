import streamlit as st
import pandas as pd
from PIL import Image
import datetime

# Title and logo
st.title("Payment Arrangements System Replication")

# Description of the system
st.markdown("""
This system replicates the functionality of a payment arrangements system used by financial services companies. 
It calculates all planned payments, including the last payment date and amount, for each customer based on the provided data. 
Users can upload a CSV file with payment arrangement details, and the system will process this data to generate a detailed payment schedule 
and display it alongside the original and processed data.
""")
# Image
image = Image.open('profile_photo.png')
st.image(image, caption='Baci Akom', width=200, use_column_width=False)

# Function to calculate payment dates based on given frequency and number of payments
def calculate_payment_dates(start_date, frequency, freq_type, freq_number, num_payments):
    dates = []
    if frequency == "single":
        dates = [start_date]
    elif frequency == "monthly" and freq_type == "M":
        for i in range(num_payments):
            dates.append(start_date + pd.DateOffset(months=i * freq_number))
    elif frequency == "weekly" and freq_type == "W":
        for i in range(num_payments):
            dates.append(start_date + pd.DateOffset(weeks=i * freq_number))
    elif frequency == "daily" and freq_type == "D":
        for i in range(num_payments):
            dates.append(start_date + pd.DateOffset(days=i * freq_number))
    return dates

# File uploader for data
st.header("Upload your CSV file")
uploaded_file = st.file_uploader("", type=["csv"])

st.markdown("---")  # Add a horizontal rule for separation

# Placeholders for data sections
processed_data_placeholder = st.empty()
payment_schedule_placeholder = st.empty()
original_data_placeholder = st.empty()

if uploaded_file is not None:
    # Read the uploaded CSV file
    data = pd.read_csv(uploaded_file)
    
    # Process the data to calculate payment dates, last payment date, and last payment amount
    data['FirstPaymentDate'] = pd.to_datetime(data['FirstPaymentDate'])
    data['PaymentDates'] = data.apply(lambda row: calculate_payment_dates(
        row['FirstPaymentDate'], row['Frequency'], row['FrequencyType'],
        row['FrequencyNumber'], row['NumberOfPayments']
    ), axis=1)
    data['LastPaymentDate'] = data['PaymentDates'].apply(lambda x: x[-1] if len(x) > 0 else None)
    data['LastPaymentAmount'] = data.apply(lambda row: row['TotalToPay'] - row['InstalmentAmount'] * (row['NumberOfPayments'] - 1), axis=1)
    
    # Create the payment schedule
    payment_schedule = data[['CustomerReference', 'PaymentDates', 'InstalmentAmount']].explode('PaymentDates')
    payment_schedule.rename(columns={'PaymentDates': 'PaymentDate', 'InstalmentAmount': 'PaymentAmount'}, inplace=True)
    
    # Update the displayed data
    with processed_data_placeholder.container():
        st.header("Processed Data")
        st.markdown("This section displays the processed data generated by the system, including the calculated last payment date and last payment amount for each arrangement.")
        st.write(data)
        
    with payment_schedule_placeholder.container():
        st.header("Payment Schedule")
        st.markdown("This section displays the detailed payment schedule for each customer, including all planned payment dates and payment amounts generated by the system.")
        st.write(payment_schedule)
        
    with original_data_placeholder.container():
        st.header("Original Data")
        st.markdown("This section displays the original data provided by the company, including anonymized arrangements.")
        st.write(data)
        
    # Download processed data
    st.header("Download Processed Data")
    csv_processed = data.to_csv(index=False)
    st.download_button(
        label="Download Processed Data as CSV",
        data=csv_processed,
        file_name='Processed_Data.csv',
        mime='text/csv',
    )
    
    # Download payment schedule
    st.header("Download Payment Schedule")
    csv_schedule = payment_schedule.to_csv(index=False)
    st.download_button(
        label="Download Payment Schedule as CSV",
        data=csv_schedule,
        file_name='Payment_Schedule.csv',
        mime='text/csv',
    )
else:
    # Load the default data
    default_processed_data = pd.read_excel("data/Processed_Data.xlsx")
    default_payment_schedule = pd.read_excel("data/Payment_Schedule.xlsx")
    default_original_data = pd.read_csv("data/CaseStudy Data.csv")
    
    # Display the default data
    with processed_data_placeholder.container():
        st.header("Processed Data")
        st.markdown("This section displays the processed data generated by the system, including the calculated last payment date and last payment amount for each arrangement.")
        st.write(default_processed_data)
    
    with payment_schedule_placeholder.container():
        st.header("Payment Schedule")
        st.markdown("This section displays the detailed payment schedule for each customer, including all planned payment dates and payment amounts generated by the system.")
        st.write(default_payment_schedule)
    
    with original_data_placeholder.container():
        st.header("Original Data")
        st.markdown("This section displays the original data provided by the company, including anonymized arrangements.")
        st.write(default_original_data)

# Footer
st.markdown("Developed by Baci Akom")
st.markdown("Contact: [baciakom](https://www.linkedin.com/in/basseyakom/)")   
st.markdown("Source code: [GitHub](https://github.com/Baci-Ak/Payment-Arrangements-System-Replication/tree/main)")
st.markdown("Report issues: [GitHub](https://github.com/Baci-Ak/Payment-Arrangements-System-Replication/issues)")
st.markdown("Acknowledgements: [RStudio](https://rstudio.com/)")

